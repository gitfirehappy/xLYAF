using System.IO;
using System.Text;

public class LuaWriter : IConfigWriter
{
    public ConfigFormat SupportedFormat => ConfigFormat.Lua;
    
    public void Write(string outputPath, ConfigData data, WriterOptions options = null)
    {
        options = options ?? new WriterOptions();
        
        using (var stream = new FileStream(outputPath, FileMode.Create, FileAccess.Write))
        using (var writer = new StreamWriter(stream, options.Encoding))
        {
            // 写入文件头注释
            if (options.AddComment)
            {
                writer.WriteLine("-- Auto-generated config file");
                writer.WriteLine("-- Generated by ConfigConvertTool");
                writer.WriteLine("-- PrimitiveFormat: " + data.PrimitiveFormat);
                writer.WriteLine();
            }
            
            // 开始Lua表
            writer.WriteLine("return {");
            
            // 处理每一行数据
            for (int i = 0; i < data.Rows.Count; i++)
            {
                var row = data.Rows[i];
                
                // 使用第一列作为主键（通常是ID）
                // 如果第一列不是ID，可以根据需要调整
                var primaryKey = row[0].ToString();
                
                // 开始一行数据
                writer.Write($"{options.Indent}[{FormatLuaValue(primaryKey)}] = {{");
                
                // 写入所有字段
                for (int j = 0; j < data.Columns.Length; j++)
                {
                    // 字段名
                    var fieldName = data.Columns[j];
                    // 字段值
                    var fieldValue = row[j];
                    
                    // 写入字段
                    writer.Write($"[\"{fieldName}\"] = {FormatLuaValue(fieldValue)}");
                    
                    // 添加逗号（除了最后一个字段）
                    if (j < data.Columns.Length - 1)
                    {
                        writer.Write(", ");
                    }
                }
                
                // 结束一行数据
                writer.Write("}");
                
                // 添加逗号（除了最后一行）
                if (i < data.Rows.Count - 1)
                {
                    writer.Write(",");
                }
                
                writer.WriteLine();
            }
            
            // 结束Lua表
            writer.WriteLine("}");
        }
    }
    
    /// <summary>
    /// 格式化Lua值（处理不同类型和转义）
    /// </summary>
    private string FormatLuaValue(object value)
    {
        if (value == null)
            return "nil";
        
        // 处理字符串类型
        if (value is string str)
        {
            // 转义特殊字符
            str = str.Replace("\\", "\\\\")
                     .Replace("\"", "\\\"")
                     .Replace("\'", "\\\'")
                     .Replace("\n", "\\n")
                     .Replace("\r", "\\r")
                     .Replace("\t", "\\t");
            
            return $"\"{str}\"";
        }
        
        // 处理布尔类型
        if (value is bool boolVal)
        {
            return boolVal ? "true" : "false";
        }
        
        // 处理数字类型（直接返回）
        if (value is int || value is float || value is double || value is decimal)
        {
            return value.ToString();
        }
        
        // 默认转为字符串
        return $"\"{value}\"";
    }
}