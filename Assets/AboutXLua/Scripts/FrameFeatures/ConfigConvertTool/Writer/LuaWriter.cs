using System.IO;
using System.Text;

public class LuaWriter : IConfigWriter
{
    public ConfigFormat SupportedFormat => ConfigFormat.Lua;
    
    public void Write(string outputPath, ConfigData data, WriterOptions options = null)
    {
        options = options ?? new WriterOptions();
        
        using (var stream = new FileStream(outputPath, FileMode.Create, FileAccess.Write))
        using (var writer = new StreamWriter(stream, options.Encoding))
        {
            // 写入文件头注释
            if (options.AddComment)
            {
                writer.WriteLine("-- Auto-generated config file");
                writer.WriteLine("-- Generated by ConfigConvertTool");
                writer.WriteLine("-- PrimitiveFormat: " + data.PrimitiveFormat);
                writer.WriteLine("-- Mode: " + data.Mode);
                writer.WriteLine();
            }

            switch (data.Mode)
            {
                case ConfigMode.Array:
                    WriteArray(writer, data, options);
                    break;
                case ConfigMode.KeyValue:
                    WriteKeyValue(writer, data, options);
                    break;
                default:
                    LogUtility.Error(LogLayer.Framework, "LuaWriter", $"不支持的配置模式: {data.Mode}");
                    break;
            }
        }
    }
    
    private void WriteArray(StreamWriter writer, ConfigData data, WriterOptions options)
    { 
        // TODO: 以数组模式写入Lua文件
        writer.WriteLine("return {");
        
        for (int i = 0; i < data.Rows.Count; i++)
        {
            var row = data.Rows[i];
            writer.Write($"{options.Indent}{{");

            for (int j = 0; j < data.Columns.Length; j++)
            {
                var fieldName = data.Columns[j];
                var fieldValue = row[j];
                
                writer.Write($"[\"{fieldName}\"] = {FormatLuaValue(fieldValue)}");
                if (j < data.Columns.Length - 1)
                {
                    writer.Write(", ");
                }
            }

            writer.Write("}");
            if (i < data.Rows.Count - 1)
            {
                writer.Write(",");
            }
            writer.WriteLine();
        }
        
        writer.WriteLine("}");
    }

    /// <summary>
    /// 写入键值对模式的配置数据
    /// 示例格式:
    /// return {
    ///     [1] = {name = "A"},
    ///     [2] = {name = "B"}
    /// }
    /// </summary>
    private void WriteKeyValue(StreamWriter writer, ConfigData data, WriterOptions options)
    {
        writer.WriteLine("return {");
        
        for (int i = 0; i < data.Rows.Count; i++)
        {
            var row = data.Rows[i];
                
            // 使用第一列作为主键（通常是ID）
            var primaryKey = row[0].ToString();
                
            // 开始一行数据
            writer.Write($"{options.Indent}[{FormatLuaValue(primaryKey)}] = {{");
                
            // 写入所有字段
            for (int j = 0; j < data.Columns.Length; j++)
            {
                var fieldName = data.Columns[j];
                var fieldValue = row[j];
                    
                // 写入字段
                writer.Write($"[\"{fieldName}\"] = {FormatLuaValue(fieldValue)}");
                    
                // 添加逗号（除了最后一个字段）
                if (j < data.Columns.Length - 1)
                {
                    writer.Write(", ");
                }
            }
                
            // 结束一行数据
            writer.Write("}");
                
            // 添加逗号（除了最后一行）
            if (i < data.Rows.Count - 1)
            {
                writer.Write(",");
            }
                
            writer.WriteLine();
        }
            
        // 结束Lua表
        writer.WriteLine("}");
    }
    
    /// <summary>
    /// 格式化Lua值（处理不同类型和转义）
    /// </summary>
    private string FormatLuaValue(object value)
    {
        if (value == null)
            return "nil";
        
        // 处理字符串类型
        if (value is string str)
        {
            // 转义特殊字符
            str = str.Replace("\\", "\\\\")
                     .Replace("\"", "\\\"")
                     .Replace("\'", "\\\'")
                     .Replace("\n", "\\n")
                     .Replace("\r", "\\r")
                     .Replace("\t", "\\t");
            
            return $"\"{str}\"";
        }
        
        // 处理布尔类型
        if (value is bool boolVal)
        {
            return boolVal ? "true" : "false";
        }
        
        // 处理数字类型（直接返回）
        if (value is int || value is float || value is double || value is decimal)
        {
            return value.ToString();
        }
        
        // 默认转为字符串
        return $"\"{value}\"";
    }
}